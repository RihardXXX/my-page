# единая точка входа для всех контейнеров
version: "3"

# имена сервисов контейнеров
services:
  # создаем nginx сервер, который будет проксировать все запросы
  nginx:
    image: nginx:1.23.4-alpine
    container_name: my-page-nginx
    # стандартный порт работы айпи адресов
    ports:
      - "80:80"
    #  делаем симлинк и не меняем состояние при пересборке
    volumes:
      - ./nginx/nginx.conf.prod:/etc/nginx/conf.d/nginx.conf
    # запускаем после запуска фронта и бэков а то упадет при прокси на фронтенд  
    depends_on:
      - frontend
      - api
      - auth
      - mailer
    # указываем имя нашей изолированной сети сервисов  
    networks:
      - my-page  


  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: my-page-frontend
#    ports:
#      - "3000:3000"
    command: npm run start
    restart: unless-stopped
    networks:
      - my-page 

  # сервис который работает с экспрессом
  api:
    build: ./api
    # даем имя контейнера чтобы при запуске найти именно его
    container_name: my-page-api
    # запуск сценария из package.json
    command: npm run start
    # всегда перезапускаем контейнер за исключением случаев когда остановлен вручную
    restart: unless-stopped
    # слева наружный порт контейнера справа внутренний порт приложения
    # ports:
    #   - "3001:3001"
    # переменные окружения которые мы можем пробросить внутри контейнера  
    environment:
      - PORT=3001
      # образец с 'mongodb://127.0.0.1:27017/api' просто локалхос меняем на хос образа монги
      - MONGO_URL=mongodb://db_api:27017/api
      - AUTH_URL=http://auth:3002
    depends_on:
      # запускаем его после запуска образа базы данных монго
      - db_api
    networks:
      - my-page 

  # сервис который работает с базой данных берем готовый образ
  db_api:
    image: mongo:6.0.5-jammy
    # даем имя контейнера чтобы при запуске найти именно его
    container_name: my-page-db-api
    # прописав порты мы можем с компаса подключится во внутрь контейнера
    ports:
      - "27017:27017"
    # выносим монгу за пределы контейнера, чтобы при пересборке БД не стиралась (симлинк ссылка)
    volumes:
      - mongodb_api:/data/db
    networks:
      - my-page  

  auth:
    build: ./auth
    container_name: my-page-auth
    command: npm run start
    restart: unless-stopped
    environment:
      - PORT=3002
      - MONGO_URL=mongodb://db_auth:27017/auth
      - API_URL=http://api:3001
      - API_MAILER=http://mailer:3003
    depends_on:
      - db_auth
    networks:
      - my-page  

  db_auth:
    image: mongo:6.0.5-jammy
    container_name: my-page-db_auth
    volumes:
      - mongodb_auth:/data/db
    networks:
      - my-page

  mailer:
    build: ./mailer
    container_name: my-page-mailer
    command: npm run start
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - PORT=3003 
      - LOGIN=${LOGIN_MAILER}
      - PASSWORD=${PASSWORD_MAILER}
      - MONGO_URL=mongodb://db_mailer:27017/mailer
    depends_on:
      - db_mailer
    networks:
      - my-page    

  db_mailer:
    image: mongo:6.0.5-jammy
    container_name: my-page-db_mailer
    volumes:
      - mongodb_mailer:/data/db
    networks:
      - my-page    

volumes:
  # чтобы иметь доступ везде к волюму они сохраняют состояние
  mongodb_api:      
  mongodb_auth:
  mongodb_mailer:    

# создаем свою изолированную сеть
networks:
  my-page:
    driver: bridge